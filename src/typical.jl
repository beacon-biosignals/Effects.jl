#=

Idea is: we have a "model formula" and a "effects formula".  all teh terms that
are not present in the effects formula get "typified".  we re-write the model
formula replacing all the terms with their "typified" version where available.

then we call modelcols using this new formula + the reference grid (from the
design)

=# 

struct TypicalTerm{T,V} <: AbstractTerm
    term::T
    values::V
    function TypicalTerm(t::T, v::V) where {T<:AbstractTerm, V}
        length(v) == width(t) || throw(ArgumentError("mismatch between number of typical values ($(length(v))) and " *
                                                     "number of columns generated by term $t ($(width(t)))"))
        return new{T,V}(t,v)
    end
end

function get_matrix_term(x)
    x = StatsModels.collect_matrix_terms(x)
    x = x isa MatrixTerm ? x : first(x)
    x isa MatrixTerm || throw(ArgumentError("couldn't extract matrix term from $x"))
    return x
end

function typify(effects_formula::FormulaTerm, model_formula::FormulaTerm, model_matrix::AbstractMatrix)
    model_terms = terms(model_formula)

    effects_terms = terms(effects_formula)

    # creates a MatrixTerm (and should work for things like MixedModels) which
    # shoudl correspond to the model_matrix
    matrix_term = get_matrix_term(model_formula)

    typical_terms = Dict()
    for term in terms(matrix_terms)
        if !any(et -> StatsModels.symequal(et, term), effects_terms)
            typical_terms[term] = typical(term, matrix_term, model_matrix)
        end
    end

    return _replace(matrix_term, typical_terms)
end

_replace(matrix_term::MatrixTerm, typicals::Dict) = MatrixTerm(_replace.(matrix_term.terms, Ref(typicals)))
_replace(term::AbstractTerm, typicals::Dict) = haskey(typicals, term) ? typicals[term] : term
_replace(term::InteractionTerm, typicals::Dict) = InteractionTerm(_replace.(term.terms, Ref(typicals)))

function typical(term::AbsractTerm, context::MatrixTerm, model_matrix; typical=mean)
    i = findfirst(t -> StatsModels.symequal(t, term), context.terms)
    i === nothing && throw(ArgumentError("Can't determine columns corresponding to '$term' in matrix term $context"))
    cols = sum(width, context.terms[1:i-1]) .+ (1:width(term))
    return map(typical, eachcol(view(model_matrix, :, cols)))
end

